#!/usr/bin/env python3
"""
üì∏ TEST BASIQUE DE CAPTURE D'√âCRAN
===================================

Test tr√®s simple pour v√©rifier la capture d'√©cran sans d√©pendances complexes.
"""

import sys
import os
import time
from datetime import datetime

def test_basic_screen_capture():
    """Test basique de capture d'√©cran"""
    print("üì∏ TEST BASIQUE DE CAPTURE D'√âCRAN")
    print("=" * 40)
    print(f"‚è∞ D√©but du test: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    try:
        # Test direct de capture d'√©cran
        print("üì¶ Test de capture d'√©cran directe...")
        
        import cv2
        import numpy as np
        from PIL import ImageGrab
        
        # Capture d'√©cran compl√®te
        start_time = time.time()
        screenshot = ImageGrab.grab()
        capture_time = time.time() - start_time
        
        # Conversion en numpy array
        screenshot_np = np.array(screenshot)
        screenshot_bgr = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)
        
        height, width = screenshot_bgr.shape[:2]
        total_pixels = height * width
        
        print(f"‚úÖ Capture d'√©cran r√©ussie: {width}x{height}")
        print(f"üìä Pixels totaux: {total_pixels:,}")
        print(f"‚è±Ô∏è  Temps capture: {capture_time:.3f}s")
        
        # Test OCR simple sur l'√©cran complet
        print(f"\nüîç Test OCR sur l'√©cran complet...")
        try:
            import pytesseract
            
            # Conversion en niveaux de gris
            gray = cv2.cvtColor(screenshot_bgr, cv2.COLOR_BGR2GRAY)
            
            # OCR
            start_time = time.time()
            text = pytesseract.image_to_string(gray, config='--oem 3 --psm 6')
            ocr_time = time.time() - start_time
            
            clean_text = text.strip()
            print(f"  Texte d√©tect√© (premiers 200 chars): '{clean_text[:200]}...'")
            print(f"  Longueur totale: {len(clean_text)} caract√®res")
            print(f"  Temps OCR: {ocr_time:.3f}s")
            
            # Chercher des cartes dans le texte
            card_chars = []
            for char in clean_text:
                if char in '23456789TJQKA':
                    card_chars.append(char)
            
            if card_chars:
                print(f"  üÉè Rangs d√©tect√©s: {card_chars}")
            else:
                print(f"  ‚ùå Aucun rang d√©tect√©")
            
        except Exception as e:
            print(f"  ‚ùå Erreur OCR: {e}")
        
        # Test d'analyse de couleur simple
        print(f"\nüé® Test analyse couleur...")
        try:
            # Conversion HSV
            hsv = cv2.cvtColor(screenshot_bgr, cv2.COLOR_BGR2HSV)
            
            # Masques de couleurs
            lower_red1 = np.array([0, 50, 50])
            upper_red1 = np.array([10, 255, 255])
            lower_red2 = np.array([170, 50, 50])
            upper_red2 = np.array([180, 255, 255])
            
            mask_red1 = cv2.inRange(hsv, lower_red1, upper_red1)
            mask_red2 = cv2.inRange(hsv, lower_red2, upper_red2)
            mask_red = cv2.bitwise_or(mask_red1, mask_red2)
            
            lower_black = np.array([0, 0, 0])
            upper_black = np.array([180, 255, 50])
            mask_black = cv2.inRange(hsv, lower_black, upper_black)
            
            # Compter les pixels
            red_pixels = cv2.countNonZero(mask_red)
            black_pixels = cv2.countNonZero(mask_black)
            
            print(f"  Pixels rouges: {red_pixels:,} ({red_pixels/total_pixels*100:.1f}%)")
            print(f"  Pixels noirs: {black_pixels:,} ({black_pixels/total_pixels*100:.1f}%)")
            
            if red_pixels > total_pixels * 0.01:  # 1% de rouge
                print(f"  üî¥ Rouge d√©tect√© (cartes ‚ô•‚ô¶)")
            elif black_pixels > total_pixels * 0.01:  # 1% de noir
                print(f"  ‚ö´ Noir d√©tect√© (cartes ‚ô†‚ô£)")
            else:
                print(f"  ‚ö™ Pas de couleur dominante")
            
        except Exception as e:
            print(f"  ‚ùå Erreur analyse couleur: {e}")
        
        print(f"\n‚úÖ TEST BASIQUE TERMIN√â!")
        print(f"‚è∞ Fin du test: {datetime.now().strftime('%H:%M:%S')}")
        
        # Recommandations
        print(f"\nüí° RECOMMANDATIONS:")
        print(f"   - Si vous voyez des cartes √† l'√©cran, lancez le jeu")
        print(f"   - Assurez-vous que les cartes sont visibles")
        print(f"   - Puis relancez le test")
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_basic_screen_capture() 