"""
Script de test pour v√©rifier l'int√©gration des nouveaux templates
"""

import sys
import logging
from modules.button_detector import ButtonDetector
from modules.image_analysis import ImageAnalyzer
from modules.screen_capture import ScreenCapture

def test_templates_integration():
    """Teste l'int√©gration des nouveaux templates"""
    
    # Configuration du logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    print("=== TEST D'INT√âGRATION DES TEMPLATES ===\n")
    
    # Test 1: Chargement des templates de boutons
    print("1. Test chargement templates de boutons...")
    try:
        button_detector = ButtonDetector()
        print(f"‚úÖ Templates de boutons charg√©s: {len(button_detector.button_templates)}")
        
        # V√©rifier les templates sp√©ciaux
        if hasattr(button_detector, 'special_templates'):
            print(f"‚úÖ Templates sp√©ciaux charg√©s: {len(button_detector.special_templates)}")
            for template_name in button_detector.special_templates.keys():
                print(f"   - {template_name}")
        else:
            print("‚ùå Templates sp√©ciaux non trouv√©s")
            
    except Exception as e:
        print(f"‚ùå Erreur chargement templates boutons: {e}")
    
    # Test 2: Chargement des templates de cartes
    print("\n2. Test chargement templates de cartes...")
    try:
        image_analyzer = ImageAnalyzer()
        print(f"‚úÖ Templates de cartes charg√©s: {len(image_analyzer.card_templates)}")
        
        # Lister les rangs disponibles
        rank_templates = [k for k in image_analyzer.card_templates.keys() if k.startswith('rank_')]
        suit_templates = [k for k in image_analyzer.card_templates.keys() if k.startswith('suit_')]
        
        print(f"   - Rangs disponibles: {len(rank_templates)}")
        print(f"   - Couleurs disponibles: {len(suit_templates)}")
        
        # V√©rifier que tous les rangs sont pr√©sents
        expected_ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        missing_ranks = []
        for rank in expected_ranks:
            if f'rank_{rank}' not in rank_templates:
                missing_ranks.append(rank)
        
        if missing_ranks:
            print(f"   ‚ö†Ô∏è Rangs manquants: {missing_ranks}")
        else:
            print("   ‚úÖ Tous les rangs sont pr√©sents!")
            
    except Exception as e:
        print(f"‚ùå Erreur chargement templates cartes: {e}")
    
    # Test 3: Test de capture d'√©cran
    print("\n3. Test capture d'√©cran...")
    try:
        screen_capture = ScreenCapture()
        print("‚úÖ Module de capture d'√©cran initialis√©")
        
        # Test capture √©cran complet
        full_screen = screen_capture.capture_full_screen()
        if full_screen is not None:
            print(f"‚úÖ Capture √©cran complet: {full_screen.shape}")
        else:
            print("‚ùå √âchec capture √©cran complet")
            
    except Exception as e:
        print(f"‚ùå Erreur capture d'√©cran: {e}")
    
    # Test 4: Test de d√©tection de couronne (simulation)
    print("\n4. Test d√©tection couronne de victoire...")
    try:
        if hasattr(button_detector, 'detect_winner_crown'):
            print("‚úÖ M√©thode de d√©tection couronne disponible")
            
            # Test avec une image vide (simulation)
            import numpy as np
            test_image = np.zeros((100, 100, 3), dtype=np.uint8)
            result = button_detector.detect_winner_crown(test_image)
            print(f"‚úÖ Test d√©tection couronne: {result}")
        else:
            print("‚ùå M√©thode de d√©tection couronne non trouv√©e")
            
    except Exception as e:
        print(f"‚ùå Erreur test d√©tection couronne: {e}")
    
    # Test 5: V√©rification des fichiers templates
    print("\n5. V√©rification des fichiers templates...")
    import os
    
    # V√©rifier les boutons
    button_files = [
        'fold_button.png', 'check_button.png', 'raise_button.png',
        'all_in_button.png', 'bet_button.png', 'cann_button.png',
        'new_hand_button.png', 'resume_button.png', 'winner.png', 'winner2.png'
    ]
    
    missing_buttons = []
    for button_file in button_files:
        if os.path.exists(f"templates/buttons/{button_file}"):
            print(f"‚úÖ {button_file}")
        else:
            print(f"‚ùå {button_file}")
            missing_buttons.append(button_file)
    
    # V√©rifier les rangs de cartes
    rank_files = [f"card_{rank}.png" for rank in ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']]
    
    missing_ranks = []
    for rank_file in rank_files:
        if os.path.exists(f"templates/cards/ranks/{rank_file}"):
            print(f"‚úÖ {rank_file}")
        else:
            print(f"‚ùå {rank_file}")
            missing_ranks.append(rank_file)
    
    # R√©sum√©
    print(f"\nüìä R√âSUM√â:")
    print(f"   - Boutons manquants: {len(missing_buttons)}")
    print(f"   - Rangs manquants: {len(missing_ranks)}")
    
    if not missing_buttons and not missing_ranks:
        print("üéâ TOUS LES TEMPLATES SONT PR√âSENTS!")
    else:
        print("‚ö†Ô∏è Certains templates manquent")
    
    print("\n=== TEST TERMIN√â ===")

if __name__ == "__main__":
    test_templates_integration() 